{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nlet InsightDisplayComponent = class InsightDisplayComponent {\n  constructor() {\n    this.insights = null;\n    this.groundingMetadata = null;\n  }\n  get webSources() {\n    if (!this.groundingMetadata || !this.groundingMetadata.groundingChunks) {\n      return [];\n    }\n    return this.groundingMetadata.groundingChunks.filter(chunk => chunk.web && chunk.web.uri && chunk.web.title).map(chunk => chunk.web);\n  }\n};\n__decorate([Input()], InsightDisplayComponent.prototype, \"insights\", void 0);\n__decorate([Input()], InsightDisplayComponent.prototype, \"groundingMetadata\", void 0);\nInsightDisplayComponent = __decorate([Component({\n  selector: 'app-insight-display',\n  templateUrl: './insight-display.component.html',\n  styleUrls: ['./insight-display.component.css']\n})], InsightDisplayComponent);\nexport { InsightDisplayComponent };","map":{"version":3,"names":["Component","Input","InsightDisplayComponent","constructor","insights","groundingMetadata","webSources","groundingChunks","filter","chunk","web","uri","title","map","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/dinesh/tech/angular/ai-portfolio-analyzer/app/components/insight-display/insight-display.component.ts"],"sourcesContent":["\nimport { Component, Input } from '@angular/core';\nimport { Candidate, GroundingChunkWeb } from '../../../types'; // Ensure correct path to types\n\n@Component({\n  selector: 'app-insight-display',\n  templateUrl: './insight-display.component.html',\n  styleUrls: ['./insight-display.component.css']\n})\nexport class InsightDisplayComponent {\n  @Input() insights: string | null = null;\n  @Input() groundingMetadata: Candidate['groundingMetadata'] | null = null;\n\n  constructor() {}\n\n  get webSources(): GroundingChunkWeb[] {\n    if (!this.groundingMetadata || !this.groundingMetadata.groundingChunks) {\n      return [];\n    }\n    return this.groundingMetadata.groundingChunks\n      .filter(chunk => chunk.web && chunk.web.uri && chunk.web.title)\n      .map(chunk => chunk.web as GroundingChunkWeb);\n  }\n}\n"],"mappings":";AACA,SAASA,SAAS,EAAEC,KAAK,QAAQ,eAAe;AAQzC,IAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EAIlCC,YAAA;IAHS,KAAAC,QAAQ,GAAkB,IAAI;IAC9B,KAAAC,iBAAiB,GAA0C,IAAI;EAEzD;EAEf,IAAIC,UAAUA,CAAA;IACZ,IAAI,CAAC,IAAI,CAACD,iBAAiB,IAAI,CAAC,IAAI,CAACA,iBAAiB,CAACE,eAAe,EAAE;MACtE,OAAO,EAAE;IACX;IACA,OAAO,IAAI,CAACF,iBAAiB,CAACE,eAAe,CAC1CC,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,GAAG,IAAID,KAAK,CAACC,GAAG,CAACC,GAAG,IAAIF,KAAK,CAACC,GAAG,CAACE,KAAK,CAAC,CAC9DC,GAAG,CAACJ,KAAK,IAAIA,KAAK,CAACC,GAAwB,CAAC;EACjD;CACD;AAbUI,UAAA,EAARb,KAAK,EAAE,C,wDAAgC;AAC/Ba,UAAA,EAARb,KAAK,EAAE,C,iEAAiE;AAF9DC,uBAAuB,GAAAY,UAAA,EALnCd,SAAS,CAAC;EACTe,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,iCAAiC;CAC9C,CAAC,C,EACWf,uBAAuB,CAcnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}