{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction InsightDisplayComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelement(1, \"p\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.insights, i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"innerText\", ctx_r0.insights);\n  }\n}\nfunction InsightDisplayComponent_div_4_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 10)(1, \"a\", 11);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const source_r2 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"href\", source_r2.uri, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", source_r2.title || source_r2.uri, \" \");\n  }\n}\nfunction InsightDisplayComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"h4\", 7);\n    i0.ɵɵtext(2, \"Data Sources (from Google Search):\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\", 8);\n    i0.ɵɵtemplate(4, InsightDisplayComponent_div_4_li_4_Template, 3, 2, \"li\", 9);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.webSources);\n  }\n}\nexport class InsightDisplayComponent {\n  constructor() {\n    this.insights = null;\n    this.groundingMetadata = null;\n  }\n  get webSources() {\n    if (!this.groundingMetadata || !this.groundingMetadata.groundingChunks) {\n      return [];\n    }\n    return this.groundingMetadata.groundingChunks.filter(chunk => chunk.web && chunk.web.uri && chunk.web.title).map(chunk => chunk.web);\n  }\n  static {\n    this.ɵfac = function InsightDisplayComponent_Factory(t) {\n      return new (t || InsightDisplayComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: InsightDisplayComponent,\n      selectors: [[\"app-insight-display\"]],\n      inputs: {\n        insights: \"insights\",\n        groundingMetadata: \"groundingMetadata\"\n      },\n      decls: 5,\n      vars: 2,\n      consts: [[1, \"bg-slate-800\", \"p-6\", \"rounded-lg\", \"shadow-xl\", \"animate-fadeIn\"], [1, \"text-xl\", \"font-semibold\", \"text-sky-400\", \"mb-4\"], [\"class\", \"prose prose-sm sm:prose lg:prose-lg xl:prose-xl prose-invert max-w-none\", 3, \"innerHTML\", 4, \"ngIf\"], [\"class\", \"mt-6 border-t border-slate-700 pt-4\", 4, \"ngIf\"], [1, \"prose\", \"prose-sm\", \"sm:prose\", \"lg:prose-lg\", \"xl:prose-xl\", \"prose-invert\", \"max-w-none\", 3, \"innerHTML\"], [1, \"whitespace-pre-wrap\", 3, \"innerText\"], [1, \"mt-6\", \"border-t\", \"border-slate-700\", \"pt-4\"], [1, \"text-md\", \"font-semibold\", \"text-slate-300\", \"mb-2\"], [1, \"list-disc\", \"list-inside\", \"space-y-1\"], [\"class\", \"text-sm\", 4, \"ngFor\", \"ngForOf\"], [1, \"text-sm\"], [\"target\", \"_blank\", \"rel\", \"noopener noreferrer\", 1, \"text-sky-400\", \"hover:text-sky-300\", \"hover:underline\", 3, \"href\"]],\n      template: function InsightDisplayComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h3\", 1);\n          i0.ɵɵtext(2, \"AI-Generated Insights\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(3, InsightDisplayComponent_div_3_Template, 2, 2, \"div\", 2)(4, InsightDisplayComponent_div_4_Template, 5, 1, \"div\", 3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.insights);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.webSources.length > 0);\n        }\n      },\n      dependencies: [i1.NgForOf, i1.NgIf],\n      styles: [\"\\n\\n[_nghost-%COMP%] {\\n    display: block;\\n}\\n\\n\\n\\n.prose[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n    margin-bottom: 1em;\\n}\\n.prose[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%] {\\n    margin-left: 1.5em;\\n    margin-bottom: 1em;\\n}\\n.prose[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\\n    margin-bottom: 0.5em;\\n}\\n\\n.animate-fadeIn[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_fadeIn 0.5s ease-in-out;\\n}\\n\\n@keyframes _ngcontent-%COMP%_fadeIn {\\n  from { opacity: 0; transform: translateY(10px); }\\n  to { opacity: 1; transform: translateY(0); }\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL2FwcC9jb21wb25lbnRzL2luc2lnaHQtZGlzcGxheS9pbnNpZ2h0LWRpc3BsYXkuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsdUNBQXVDO0FBQ3ZDO0lBQ0ksY0FBYztBQUNsQjs7QUFFQSw2RkFBNkY7QUFDN0Y7SUFDSSxrQkFBa0I7QUFDdEI7QUFDQTtJQUNJLGtCQUFrQjtJQUNsQixrQkFBa0I7QUFDdEI7QUFDQTtJQUNJLG9CQUFvQjtBQUN4Qjs7QUFFQTtFQUNFLGtDQUFrQztBQUNwQzs7QUFFQTtFQUNFLE9BQU8sVUFBVSxFQUFFLDJCQUEyQixFQUFFO0VBQ2hELEtBQUssVUFBVSxFQUFFLHdCQUF3QixFQUFFO0FBQzdDIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKiBTdHlsZXMgZm9yIEluc2lnaHREaXNwbGF5Q29tcG9uZW50ICovXG46aG9zdCB7XG4gICAgZGlzcGxheTogYmxvY2s7XG59XG5cbi8qIEJhc2ljIHByb3NlIHN0eWxpbmcgaWYgbm90IHVzaW5nIFRhaWx3aW5kIHR5cG9ncmFwaHkgcGx1Z2luIG9yIGlmIG1vcmUgY29udHJvbCBpcyBuZWVkZWQgKi9cbi5wcm9zZSBwIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxZW07XG59XG4ucHJvc2UgdWwge1xuICAgIG1hcmdpbi1sZWZ0OiAxLjVlbTtcbiAgICBtYXJnaW4tYm90dG9tOiAxZW07XG59XG4ucHJvc2UgbGkge1xuICAgIG1hcmdpbi1ib3R0b206IDAuNWVtO1xufVxuXG4uYW5pbWF0ZS1mYWRlSW4ge1xuICBhbmltYXRpb246IGZhZGVJbiAwLjVzIGVhc2UtaW4tb3V0O1xufVxuXG5Aa2V5ZnJhbWVzIGZhZGVJbiB7XG4gIGZyb20geyBvcGFjaXR5OiAwOyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMTBweCk7IH1cbiAgdG8geyBvcGFjaXR5OiAxOyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7IH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵproperty","ctx_r0","insights","ɵɵsanitizeHtml","ɵɵadvance","ɵɵtext","source_r2","uri","ɵɵsanitizeUrl","ɵɵtextInterpolate1","title","ɵɵtemplate","InsightDisplayComponent_div_4_li_4_Template","webSources","InsightDisplayComponent","constructor","groundingMetadata","groundingChunks","filter","chunk","web","map","selectors","inputs","decls","vars","consts","template","InsightDisplayComponent_Template","rf","ctx","InsightDisplayComponent_div_3_Template","InsightDisplayComponent_div_4_Template","length"],"sources":["/Users/dinesh/tech/angular/ai-portfolio-analyzer/app/components/insight-display/insight-display.component.ts","/Users/dinesh/tech/angular/ai-portfolio-analyzer/app/components/insight-display/insight-display.component.html"],"sourcesContent":["\nimport { Component, Input } from '@angular/core';\nimport { Candidate, GroundingChunkWeb } from '../../../types'; // Ensure correct path to types\n\n@Component({\n  selector: 'app-insight-display',\n  templateUrl: './insight-display.component.html',\n  styleUrls: ['./insight-display.component.css']\n})\nexport class InsightDisplayComponent {\n  @Input() insights: string | null = null;\n  @Input() groundingMetadata: Candidate['groundingMetadata'] | null = null;\n\n  constructor() {}\n\n  get webSources(): GroundingChunkWeb[] {\n    if (!this.groundingMetadata || !this.groundingMetadata.groundingChunks) {\n      return [];\n    }\n    return this.groundingMetadata.groundingChunks\n      .filter(chunk => chunk.web && chunk.web.uri && chunk.web.title)\n      .map(chunk => chunk.web as GroundingChunkWeb);\n  }\n}\n","<div class=\"bg-slate-800 p-6 rounded-lg shadow-xl animate-fadeIn\">\n  <h3 class=\"text-xl font-semibold text-sky-400 mb-4\">AI-Generated Insights</h3>\n  <div *ngIf=\"insights\" class=\"prose prose-sm sm:prose lg:prose-lg xl:prose-xl prose-invert max-w-none\"\n    [innerHTML]=\"insights\">\n    <!-- Content will be rendered here. Consider using a pipe to sanitize HTML if insights can contain it -->\n    <!-- For now, assuming insights is plain text or very simple markdown-like text -->\n    <p [innerText]=\"insights\" class=\"whitespace-pre-wrap\"></p>\n  </div>\n\n  <div *ngIf=\"webSources.length > 0\" class=\"mt-6 border-t border-slate-700 pt-4\">\n    <h4 class=\"text-md font-semibold text-slate-300 mb-2\">Data Sources (from Google Search):</h4>\n    <ul class=\"list-disc list-inside space-y-1\">\n      <li *ngFor=\"let source of webSources\" class=\"text-sm\">\n        <a [href]=\"source.uri\" target=\"_blank\" rel=\"noopener noreferrer\"\n          class=\"text-sky-400 hover:text-sky-300 hover:underline\">\n          {{ source.title || source.uri }}\n        </a>\n      </li>\n    </ul>\n  </div>\n</div>\n<!-- Note: The 'безопасныйHTMLПайпЭтоНужноСоздатьЕслиHTML' is a placeholder.\n     If 'insights' contains HTML, you'll need to create a pipe that uses DomSanitizer.\n     For plain text, the <p [innerText]> approach is safer.\n     Using [innerHTML] directly with unsanitized data is a security risk (XSS).\n     The current Gemini service prompt asks for plain text, so [innerText] is preferred. -->"],"mappings":";;;;ICEEA,EAAA,CAAAC,cAAA,aACyB;IAGvBD,EAAA,CAAAE,SAAA,WAA0D;IAC5DF,EAAA,CAAAG,YAAA,EAAM;;;;IAJJH,EAAA,CAAAI,UAAA,cAAAC,MAAA,CAAAC,QAAA,EAAAN,EAAA,CAAAO,cAAA,CAAsB;IAGnBP,EAAA,CAAAQ,SAAA,EAAsB;IAAtBR,EAAA,CAAAI,UAAA,cAAAC,MAAA,CAAAC,QAAA,CAAsB;;;;;IAOrBN,EADF,CAAAC,cAAA,aAAsD,YAEM;IACxDD,EAAA,CAAAS,MAAA,GACF;IACFT,EADE,CAAAG,YAAA,EAAI,EACD;;;;IAJAH,EAAA,CAAAQ,SAAA,EAAmB;IAAnBR,EAAA,CAAAI,UAAA,SAAAM,SAAA,CAAAC,GAAA,EAAAX,EAAA,CAAAY,aAAA,CAAmB;IAEpBZ,EAAA,CAAAQ,SAAA,EACF;IADER,EAAA,CAAAa,kBAAA,MAAAH,SAAA,CAAAI,KAAA,IAAAJ,SAAA,CAAAC,GAAA,MACF;;;;;IANJX,EADF,CAAAC,cAAA,aAA+E,YACvB;IAAAD,EAAA,CAAAS,MAAA,yCAAkC;IAAAT,EAAA,CAAAG,YAAA,EAAK;IAC7FH,EAAA,CAAAC,cAAA,YAA4C;IAC1CD,EAAA,CAAAe,UAAA,IAAAC,2CAAA,gBAAsD;IAO1DhB,EADE,CAAAG,YAAA,EAAK,EACD;;;;IAPqBH,EAAA,CAAAQ,SAAA,GAAa;IAAbR,EAAA,CAAAI,UAAA,YAAAC,MAAA,CAAAY,UAAA,CAAa;;;ADH1C,OAAM,MAAOC,uBAAuB;EAIlCC,YAAA;IAHS,KAAAb,QAAQ,GAAkB,IAAI;IAC9B,KAAAc,iBAAiB,GAA0C,IAAI;EAEzD;EAEf,IAAIH,UAAUA,CAAA;IACZ,IAAI,CAAC,IAAI,CAACG,iBAAiB,IAAI,CAAC,IAAI,CAACA,iBAAiB,CAACC,eAAe,EAAE;MACtE,OAAO,EAAE;IACX;IACA,OAAO,IAAI,CAACD,iBAAiB,CAACC,eAAe,CAC1CC,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,GAAG,IAAID,KAAK,CAACC,GAAG,CAACb,GAAG,IAAIY,KAAK,CAACC,GAAG,CAACV,KAAK,CAAC,CAC9DW,GAAG,CAACF,KAAK,IAAIA,KAAK,CAACC,GAAwB,CAAC;EACjD;;;uBAbWN,uBAAuB;IAAA;EAAA;;;YAAvBA,uBAAuB;MAAAQ,SAAA;MAAAC,MAAA;QAAArB,QAAA;QAAAc,iBAAA;MAAA;MAAAQ,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,iCAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCRlCjC,EADF,CAAAC,cAAA,aAAkE,YACZ;UAAAD,EAAA,CAAAS,MAAA,4BAAqB;UAAAT,EAAA,CAAAG,YAAA,EAAK;UAQ9EH,EAPA,CAAAe,UAAA,IAAAoB,sCAAA,iBACyB,IAAAC,sCAAA,iBAMsD;UAWjFpC,EAAA,CAAAG,YAAA,EAAM;;;UAlBEH,EAAA,CAAAQ,SAAA,GAAc;UAAdR,EAAA,CAAAI,UAAA,SAAA8B,GAAA,CAAA5B,QAAA,CAAc;UAOdN,EAAA,CAAAQ,SAAA,EAA2B;UAA3BR,EAAA,CAAAI,UAAA,SAAA8B,GAAA,CAAAjB,UAAA,CAAAoB,MAAA,KAA2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}